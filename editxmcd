#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2010  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import audiotools
import sys
import gettext

gettext.install("audiotools", unicode=True)

try:
    import urwid
except ImportError:
    msg = audiotools.Messenger("editxmcd", None)
    msg.error(_(u"urwid is required"))
    msg.output(_(u"Please download and install urwid from http://excess.org/urwid/"))
    msg.output(_(u"or your system's package manager."))
    sys.exit(1)

class MappedEdit(urwid.Edit):
    def __init__(self, caption='', edit_text='', multiline=False,
                 align='left', wrap='space', allow_tab=False,
                 edit_pos=None, layout=None, key_map={}):
        urwid.Edit.__init__(self, caption=caption,
                            edit_text=edit_text,
                            multiline=multiline,
                            align=align,
                            wrap=wrap,
                            allow_tab=allow_tab,
                            edit_pos=edit_pos,
                            layout=layout)
        self.__key_map__ = key_map

    def keypress(self, size, key):
        return urwid.Edit.keypress(self, size, self.__key_map__.get(key, key))

class Editxmcd(urwid.Pile):
    def __init__(self, xmcd_path, xmcd_file):
        self.xmcd_path = xmcd_path
        self.xmcd_file = xmcd_file
        track_total = len(xmcd_file)

        #setup our main application widgets
        self.path = urwid.Text(xmcd_path, wrap='clip')

        self.album_name = MappedEdit(('header', "Album Name  : "),
                                     edit_text=xmcd_file.album_name,
                                     wrap='clip',
                                     key_map={'enter': 'down'})
        self.album_artist = MappedEdit(('header', "Artist Name : "),
                                       edit_text=xmcd_file.artist_name,
                                       wrap='clip',
                                       key_map={'enter': 'down'})
        self.album_year = MappedEdit(('header', "Year        : "),
                                     edit_text=xmcd_file.year,
                                     wrap='clip',
                                     key_map={'enter': 'down'})
        self.album_catalog = MappedEdit(('header', "Catalog     : "),
                                        edit_text=xmcd_file.catalog,
                                        wrap='clip',
                                        key_map={'enter': 'down'})
        self.album_extra = MappedEdit(('header', "Extra       : "),
                                      edit_text=xmcd_file.extra,
                                      wrap='clip',
                                      key_map={'enter': 'down'})

        self.save = urwid.Button(('unedited', "Save"),
                                 on_press=self.perform_save)

        self.cancel = urwid.Button("Quit",
                                   on_press=self.perform_exit)

        self.track_names = [MappedEdit("",
                                       edit_text=xmcd_file.get_track(i)[0],
                                       key_map={'enter': 'down'})
                            for i in xrange(track_total)]

        self.track_artists = [MappedEdit("",
                                         edit_text=xmcd_file.get_track(i)[1],
                                         key_map={'enter': 'down'})
                              for i in xrange(track_total)]

        self.status_bar = urwid.Text(u'', align='center')


        #connect the appliction widget signals
        urwid.connect_signal(self.album_name, 'change', self.edited)
        urwid.connect_signal(self.album_artist, 'change', self.edited)
        urwid.connect_signal(self.album_year, 'change', self.edited)
        urwid.connect_signal(self.album_catalog, 'change', self.edited)
        urwid.connect_signal(self.album_extra, 'change', self.edited)

        for widget in self.track_names:
            urwid.connect_signal(widget, 'change', self.edited)

        for widget in self.track_artists:
            urwid.connect_signal(widget, 'change', self.edited)


        #setup miscellaneous spacer/info widgets
        track_labels = [urwid.Text(('header', "%2.2d" % (i)), align='right')
                        for i in xrange(1, track_total + 1)]

        header = [urwid.Pile(
                [urwid.Columns([('fixed', 14,
                                 urwid.Text(('header',
                                             "File Path   : "))),
                                self.path])]),
                  self.album_name,
                  self.album_artist,
                  self.album_year,
                  self.album_catalog,
                  self.album_extra,
                  urwid.Divider(div_char='-'),
                  urwid.Pile(
                [urwid.Columns([('fixed', 5,
                                 urwid.Text(('header', u"Track"))),
                                ('weight', 2,
                                 urwid.Text(('header', u"Track Name"),
                                            align='center')),
                                ('weight', 1,
                                 urwid.Text(('header', u"Track Artist"),
                                            align='center'))], 1)])]

        body = urwid.Pile([urwid.Columns([('fixed', 5, label),
                                          ('weight', 2, track),
                                          ('weight', 1, artist)], 1)
                           for label, track, artist in
                           zip(track_labels,
                               self.track_names,
                               self.track_artists)])

        footer = [urwid.Divider(div_char='-'),
                  urwid.GridFlow([self.save, self.cancel], 8, 5, 1, 'center'),
                  self.status_bar]

        #attach widgets to main application widget
        urwid.Pile.__init__(self, [('fixed', 8,
                                    urwid.Filler(urwid.Pile(header))),
                                   ('weight', 1,
                                    urwid.Filler(body, valign='top')),
                                   ('fixed', 3,
                                    urwid.Filler(urwid.Pile(footer)))])

    def handle_text(self, i):
        if (i == 'esc'):
            self.perform_exit()
        elif (i == 'ctrl s'):
            self.perform_save()
        elif (i == 'ctrl q'):
            self.perform_exit()
        else:
            return

    def perform_exit(self, *args):
        raise urwid.ExitMainLoop()

    def perform_save(self, *args):
        def convert_text(s):
            if (isinstance(s, unicode)):
                return s
            else:
                return s.decode(audiotools.IO_ENCODING, 'replace')

        #update current xmcd_file
        self.xmcd_file.album_name = convert_text(
            self.album_name.get_edit_text())
        self.xmcd_file.artist_name = convert_text(
            self.album_artist.get_edit_text())
        self.xmcd_file.year = convert_text(
            self.album_year.get_edit_text())
        self.xmcd_file.catalog = convert_text(
            self.album_catalog.get_edit_text())
        self.xmcd_file.extra = convert_text(
            self.album_extra.get_edit_text())
        for i in xrange(len(self.xmcd_file)):
            self.xmcd_file.set_track(
                i,
                convert_text(self.track_names[i].get_edit_text()),
                convert_text(self.track_artists[i].get_edit_text()),
                self.xmcd_file.get_track(i)[2])

        #save current xmcd_file over old one, if possible
        try:
            f = open(self.xmcd_path, "wb")
            f.write(self.xmcd_file.to_string())
            f.close()

            #unset Save button's status
            self.save.set_label(('unedited', 'Save'))
            self.status_bar.set_text(u"file saved")
        except IOError, err:
            #generate error message if not
            self.status_bar.set_text(('error', str(err)))

    def edited(self, *args):
        self.save.set_label(('edited', 'Save'))
        self.status_bar.set_text(u"")

if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        usage=_(u'%prog -x XMCD file'),
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option('-x', '--xmcd', action='store',
                      type='string', dest='xmcd',
                      metavar='FILENAME',
                      help=_(u'FreeDB XMCD file or MusicBrainz XML file'))
    (options, args) = parser.parse_args()
    msg = audiotools.Messenger("editxmcd", options)

    if (options.xmcd is not None):
        xmcd_path = options.xmcd
    elif (len(args) > 0):
        xmcd_path = args[0]
    else:
        msg.error(_(u"a FreeDB XMCD file or MusicBrainz XML file is required"))
        sys.exit(1)

    try:
        xmcd_file = audiotools.read_metadata_file(xmcd_path)
    except audiotools.MetaDataFileException, err:
        msg.error(str(err))
        sys.exit(1)

    editxmcd = Editxmcd(xmcd_path, xmcd_file)

    loop = urwid.MainLoop(editxmcd,
                          [('header', 'default,bold', 'default', ''),
                           ('unedited', 'default', 'default', ''),
                           ('edited', 'default,bold', 'default', ''),
                           ('error', 'dark red,bold', 'default', '')],
                          unhandled_input=editxmcd.handle_text)

    # term = urwid.raw_display.RealTerminal()
    # term.tty_signal_keys('undefined', 'undefined', 'undefined',
    #                      'undefined', 'undefined')
    loop.run()
