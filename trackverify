#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2010  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import sys
import os.path
import audiotools
import gettext


class Counter:
    def __init__(self):
        self.value = 0

    def __int__(self):
        return self.value

    def increment(self):
        self.value += 1


class FailedAudioFile:
    def __init__(self, class_name, path, err):
        self.NAME = class_name
        self.filename = path
        self.err = err

    def verify(self):
        raise self.err


def open_file(filename):
    f = open(filename, "rb")
    try:
        for audioclass in audiotools.TYPE_MAP.values():
            f.seek(0, 0)
            if (audioclass.is_type(f)):
                class_name = audioclass.NAME
                try:
                    return audioclass(filename)
                except audiotools.InvalidFile, err:
                    return FailedAudioFile(class_name, filename, err)
        else:
            raise audiotools.UnsupportedFile(filename)
    finally:
        f.close()


def get_tracks(args, accept_list):
    if (accept_list is not None):
        accept_list = set(accept_list)

    for path in args:
        if (os.path.isfile(path)):
            try:
                track = open_file(path)
                if not ((accept_list is not None) and
                        (track.NAME not in accept_list)):
                    yield track
            except (audiotools.UnsupportedFile, IOError):
                continue
        elif (os.path.isdir(path)):
            for (d, ds, fs) in os.walk(path):
                for f in fs:
                    try:
                        track = open_file(os.path.join(d, f))
                        if not ((accept_list is not None) and
                                (track.NAME not in accept_list)):
                            yield track
                    except (audiotools.UnsupportedFile, IOError):
                        continue


gettext.install("audiotools", unicode=True)

if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        usage=_(u"%prog <track 1> [track 2] ..."),
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option('-t', '--type',
                      action='append',
                      dest='accept_list',
                      metavar='type',
                      choices=audiotools.TYPE_MAP.keys(),
                      help=_(u'a type of audio to accept'))

    parser.add_option('-R', '--no-summary',
                      action='store_true',
                      dest='no_summary',
                      help=_(u'suppress summary output'))

    parser.add_option('-V', '--verbose',
                      action='store',
                      dest='verbosity',
                      choices=audiotools.VERBOSITY_LEVELS,
                      default=audiotools.DEFAULT_VERBOSITY,
                      help=_(u'the verbosity level to execute at'))

    (options, args) = parser.parse_args()
    msg = audiotools.Messenger("trackverify", options)

    summary_success = {}
    summary_failure = {}

    for track in get_tracks(args, options.accept_list):
        msg.partial_output(u"%s : " % (msg.filename(track.filename)))
        try:
            track.verify()
            msg.output(msg.ansi(_(u"OK"), [msg.FG_GREEN]))
            summary_success.setdefault(track.NAME, Counter()).increment()
        except audiotools.InvalidFile, err:
            #InvalidFile should return Unicode errors at some point
            msg.output(msg.ansi(unicode(err), [msg.FG_RED]))
            summary_failure.setdefault(track.NAME, Counter()).increment()

    formats = sorted(list(set(summary_success.keys()) |
                          set(summary_failure.keys())))
    success_total = sum(map(int, summary_success.values()))
    failure_total = sum(map(int, summary_failure.values()))

    if ((len(formats) > 0) and (not options.no_summary)):
        msg.output(_(u"Results:"))
        msg.output(u"")
        msg.new_row()
        msg.output_column(_(u"format"), True)
        msg.output_column(u" ")
        msg.output_column(_(u"success"), True)
        msg.output_column(u" ")
        msg.output_column(_(u"failure"), True)
        msg.output_column(u" ")
        msg.output_column(_(u"total"), True)
        msg.divider_row([u"-", u" ", u"-", u" ", u"-", u" ", u"-"])

        for format in formats:
            success = int(summary_success.get(format, 0))
            failure = int(summary_failure.get(format, 0))
            msg.new_row()
            msg.output_column(format.decode('ascii'), True)
            msg.output_column(u" ")
            msg.output_column(unicode(success), True)
            msg.output_column(u" ")
            msg.output_column(unicode(failure), True)
            msg.output_column(u" ")
            msg.output_column(unicode(success + failure), True)

        msg.divider_row([u"-", u" ", u"-", u" ", u"-", u" ", u"-"])
        msg.new_row()
        msg.output_column(u"summary", True)
        msg.output_column(u" ")
        msg.output_column(unicode(success_total), True)
        msg.output_column(u" ")
        msg.output_column(unicode(failure_total), True)
        msg.output_column(u" ")
        msg.output_column(unicode(success_total + failure_total), True)

        msg.output_rows()

    if (failure_total > 0):
        sys.exit(1)
